*if_pyth.txt*   For Vim version 7.4.  最近更新: 2013年8月


		  VIM REFERENCE MANUAL    by Paul Moore
		  譯者: lang2，Willis http://vimcdoc.sf.net


Vim 的 Python 編程接口					*python* *Python*

1. 命令						|python-commands|
2. vim 模塊					|python-vim|
3. 緩衝區對象					|python-buffer|
4. 範圍對象					|python-range|
5. 窗口對象					|python-window|
6. 標籤頁對象					|python-tabpage|
7. vim.bindeval 對象				|python-bindeval-objects|
8. pyeval()、py3eval() Vim 函數			|python-pyeval|
9. 動態調入					|python-dynamic|
10. Python 3					|python3|

{Vi 無此功能}

Vim 的 Python 2.x 接口僅當 |+python| 特性被編譯進 Vim 時纔有效。
Vim 的 Python 3 接口僅當 |+python3| 特性被編譯進 Vim 時纔有效。
可以同時使用兩者，但請閱讀 |python-2-and-3|。

==============================================================================
1. 命令							*python-commands*

					*:python* *:py* *E205* *E263* *E264*
:[range]py[thon] {stmt}
			執行 Python 語句 {stmt}。一個判斷 ":python" 命令是否可
			用的簡單檢查: >
				:python print "Hello"

:[range]py[thon] << {endmarker}
{script}
{endmarker}
			執行 Python 腳本 {script}。
			備註: 此命令在沒有編譯進 Python 特性時無效。爲了避免這
			樣的錯誤，參閱 |script-here|。

{endmarker} 前面_不能_有任何空白字符。如果在 "<<" 之後省略了 {endmarker}，在
{script} 之後一定要有一個點 '.'。這和 |:append| 及 |:insert| 命令的道理是一樣
的。這種形式的 |:python| 命令主要用於在 Vim 腳本中嵌入 Python 代碼。

例子: >
	function! IcecreamInitialize()
	python << EOF
	class StrawberryIcecream:
		def __call__(self):
			print 'EAT ME'
	EOF
	endfunction
<
備註: Python 對於縮進是非常敏感的。要確保 "class" 所在行及 "EOF" 沒有任何縮
進。

							*:pydo*
:[range]pydo {body}	對 [range] 裏的每一行執行 Python 函數 "def
			_vim_pydo(line, linenr): {body}"，其中的函數參數設爲每
			行不帶尾部 <EOL> 的文本，以及行號。該函數應該返回字符
			串或者 None。如果返回字符串，它會用來替代當前執行的
			行。缺省 [range] 爲整個文件: "1,$"。
			{Vi 無此功能}

示例:
>
	:pydo return "%s\t%d" % (line[::-1], len(line))
	:pydo if line: return "%4d: %s" % (linenr, line)
<
							*:pyfile* *:pyf*
:[range]pyf[ile] {file}
			執行 {file} 文件中包含的 Python 腳本。整個參數被用作一
			個文件名。 {Vi 無此功能}

這些命令根本上都差不多 － 它們都將當前範圍 |python-range| 設定爲指定的行範圍，
並對其執行 Python 代碼。

:python 的情況所執行的代碼來自命令行。
:pyfile 的情況所執行的代碼來自一個指定的文件。

Python 命令不能在 |sandbox| 裏使用。

需要傳遞參數的話，你得使用 sys.argv[]。例如: >

	:python import sys
	:python sys.argv = ["foo", "bar"]
	:pyfile myscript.py

下面是一些例子						*python-examples*  >

	:python from vim import *
	:python from string import upper
	:python current.line = upper(current.line)
	:python print "Hello"
	:python str = current.buffer[42]

(注意 如同導入 (import) 模塊一樣，變動對後續命令持續有效。這和 Python 的解釋
程序是一樣的。)

==============================================================================
2. vim 模塊						*python-vim*

Python 的代碼所有對 Vim 的操作 (只有一個例外 － 看下面的 |python-output|) 都是
通過 "vim" 模塊來進行的。該模塊包括兩個方法，三個常量，以及一個異常對象。在使
用它們之前你得先導入 (import) vim 模塊。

總覽 >
	:py print "Hello"		# 顯示信息
	:py vim.command(cmd)		# 執行 Ex 命令
	:py w = vim.windows[n]		# 獲取窗口 "n"
	:py cw = vim.current.window	# 獲取當前窗口
	:py b = vim.buffers[n]		# 獲取緩衝區 "n"
	:py cb = vim.current.buffer	# 獲取當前緩衝區
	:py w.height = lines		# 設定窗口高度
	:py w.cursor = (row, col)	# 設定光標位置
	:py pos = w.cursor		# 獲取 tuple (行，列)
	:py name = b.name		# 獲取緩衝區的文件名
	:py line = b[n]			# 獲取緩衝區內的一行
	:py lines = b[n:m]		# 獲取數行
	:py num = len(b)		# 獲取統計的行數
	:py b[n] = str			# 在緩衝區裏寫入一行文本
	:py b[n:m] = [str1, str2, str3]	# 一次性寫入多行文本
	:py del b[n]			# 刪除一行
	:py del b[n:m]			# 刪除數行

"vim" 模塊中的方法

vim.command(str)					*python-command*
	執行 vim (ex-模式) 命令 str。無返回值。
	例如: >
		:py vim.command("set tw=72")
		:py vim.command("%s/aaa/bbb/g")
<	下面的定義可以執行普通模式命令: >
		def normal(str):
			vim.command("normal "+str)
		# 注意使用單引號標識出含有雙引號的字符串
		normal('"a2dd"aP')
<								*E659*
	":python" 在 Python 2.2 及之前版本上不能嵌套使用。下面命令只對 Python
	2.3 之後版本適用: >
		:py vim.command("python print 'Hello again Python'")


vim.eval(str)						*python-eval*
	使用 vim 內部的表達式處理器來對表達式 str 求值。(參閱 |expression|)。
	返回表達式的結果:
	-如果 Vim 表達式計算結果是字符串或者數值，那麼返回一個字符串。
	-如果 Vim 表達式計算結果是 Vim 列表，那麼返回一個列表
	-如果 Vim 表達式計算結果是 Vim 字典，那麼返回一個字典
	字典和列表被遞歸擴展。
	例: >
	    :py text_width = vim.eval("&tw")
	    :py str = vim.eval("12+12")		# 注意: 結果是個字符串！
						# 使用 string.atoi()
						# 把它轉換成數字

	    :py tagList = vim.eval('taglist("eval_expr")')
<	後一個將返回一個 python 類型的字典列表，例如:
	[{'cmd': '/^eval_expr(arg, nextcmd)$/', 'static': 0, 'name':
	'eval_expr', 'kind': 'f', 'filename': './src/eval.c'}]

vim.bindeval(str)					*python-bindeval*
	類似於 |python-eval|，但返回 |python-bindeval-objects| 中描述的特殊
	對象。這些 python 對象可用於修改 (|List| 或 |Dictionary|) 或調用
	(|Funcref|) vim 對象。

vim.strwidth(str)					*python-strwidth*
	類似於 |strwidth()|: 返回 str 佔據的顯示單元數，製表符算作一個單元。

vim.foreach_rtp(callable)				*python-foreach_rtp*
	對 'runtimepath' 的每個路徑調用給定的 callable，直到某次 callable 返回
	非 None 值、拋出例外、或者沒有更多的路徑爲止。如果因爲 callable 返回
	非 None 而停止，vim.foreach_rtp 函數返回 callable 返回的值。

vim.chdir(*args, **kwargs)				*python-chdir*
vim.fchdir(*args, **kwargs)				*python-fchdir*
	運行 os.chdir 或 os.fchdir，然後做合適的 vim 的事情。
	備註: 你不應直接使用這些函數，用 os.chdir 或 os.fchdir
	代替。如果 os.fchdir 不存在，則 vim.fchdir 的行爲未定義。


"vim" 模塊中的異常對象

	vim.error					*python-error*
	當遇到 Vim 的錯誤時，Python 引起一個 vim.error 類的異常。
	例: >
		try:
			vim.command("put a")
		except vim.error:
			# nothing in register a

"vim" 模塊中的常量
	注意 這些其實並非真正的常量 － 你還是可以對它們賦值。但這毫無意義，因
	爲你會丟失該 vim 對象本來代表的值。

vim.buffers						*python-buffers*
	一個映射對象，用來提供對 vim 緩衝區的操作。該對象支持以下操作: >
	    :py b = vim.buffers[i]	# 索引 (只讀)
	    :py b in vim.buffers	# 成員測試
	    :py n = len(vim.buffers)	# 成員個數
	    :py for b in vim.buffers:	# 遍歷緩衝區列表
<
vim.windows						*python-windows*
	一個序列對象，用來提供對 vim 窗口的操作。該對象支持以下操作: >
	    :py w = vim.windows[i]	# 索引 (只讀)
	    :py w in vim.windows	# 成員測試
	    :py n = len(vim.windows)	# 成員個數
	    :py for w in vim.windows:	# 順序存取
<	注意: vim.windows 對象總是訪問當前標籤頁。|python-tabpage|.windows 對
	象和父 |python-tabpage| 對象綁定，總是使用該標籤頁的窗口 (如果該標籤頁
	該刪除，拋出 vim.error)。你可以得到兩者的引用而無需保存 vim 模塊對象或
	|python-tabpage| 的引用。此時它們不會失去自己的屬性。

vim.tabpages						*python-tabpages*
	一個序列對象，用來提供 vim 標籤頁的操作。該對象支持以下操作: >
	    :py t = vim.tabpages[i]	# 索引 (只讀)
	    :py t in vim.tabpages	# 成員測試
	    :py n = len(vim.tabpages)	# 成員個數
	    :py for t in vim.tabpages:	# 順序存取
<
vim.current						*python-current*
	一個用來提供對各種各樣當前 "current" 對象進行操作的對象。它包括一些特
	定的屬性:
		vim.current.line	當前行 (讀寫)			字符串
		vim.current.buffer	當前緩衝區 (讀寫)		緩衝區
		vim.current.window	當前窗口 (讀寫)			窗口
		vim.current.tabpage	當前標籤頁 (讀寫)		標籤頁
		vim.current.range	當前行範圍 (只讀)		範圍

	最後一種情況需要一些額外的解釋。當用 :python 或 :pyfile 命令指定一個範
	圍之後，該範圍將成爲 "當前範圍"。一個範圍就如同一個緩衝區，只不過所操
	作的對象界限於所有行的一個子集。請參閱 |python-range|。

	注意: 賦值給 vim.current.{buffer,window,tagpage} 時，分別期待合法的
	|python-buffer|、|python-window| 或 |python-tabpage| 對象。賦值觸發
	到給定緩衝區、窗口、標籤頁的正常切換 (帶有 |autocommand| 自動命令)。這
	是在 python 裏切換 UI 對象的唯一方法: 不能給 |python-tabpage|.window
	屬性賦值。要想進行切換但不執行自動命令，可用 >
	    py << EOF
	    saved_eventignore = vim.options['eventignore']
	    vim.options['eventignore'] = 'all'
	    try:
	        vim.current.buffer = vim.buffers[2] # 切換到緩衝區 2
	    finally:
	        vim.options['eventignore'] = saved_eventignore
	    EOF

vim.vars						*python-vars*
vim.vvars						*python-vvars*
	類似字典的對象，分別對應全局 (|g:|) 和 vim (|v:|) 變量。等價於
	`vim.bindeval("g:")`，但更快。

vim.options						*python-options*
	部分支持映射協議 (即讀寫子項目) 的對象，用於對全局選項進行讀寫訪問。
	注意: 和 |:set| 不同，此對象只能訪問全局選項，不能用於讀寫局部變量的
	值或以任何方式去訪問只限局部的變量。如果沒有指定名字的全局變量，拋出
	KeyError (也即，對 |global-local| 或只限全局的選項，不會拋出此例外，
	但對局部於窗口或局部於緩衝區的則會)。|python-buffer| 對象可用於訪問局
	部於緩衝區的選項，|python-window| 選項則可用於訪問局部於窗口的選項。

	可通過 vim 模塊的 "Options" 屬性取得此對象的類型。

Python 的輸出						*python-output*
	Vim 將所有 Python 代碼的輸出都顯示在信息區。普通的輸出會以一般信息出
	現，錯誤會以出錯信息出現。

	用具體實現的術語來講，這表示所有 sys.stdout (包括 print 語句的輸出) 以
	一般信息形式出現，而所有 sys.stderr (包括 error tracebacks) 都會被顯示
	成出錯信息。

							*python-input*
	Vim 並不支持用 Python 來輸入 (通過 sys.stdin，包括 input() 和
	raw_input())。這些調用可能會導致崩潰。這個問題可能以後會修正。

		    *python2-directory* *python3-directory* *pythonx-directory*
Python 'runtimepath' 處理				*python-special-path*

在 python 中，vim.VIM_SPECIAL_PATH 特殊目錄用於代表 'runtimepath' 的路徑列表:
如果 sys.path 包含此目錄而且 sys.path_hooks 包含 vim.path_hooks，python 會試圖
載入 'runtimepath' 的每個 {rtp} 對應的 {rtp}/python2 (或 python3) 和
{rtp}/pythonx (同時適用於兩個 python 版本) 模塊。

實現大致如下，但以 C 編寫: >

    from imp import find_module, load_module
    import vim
    import sys

    class VimModuleLoader(object):
        def __init__(self, module):
            self.module = module

        def load_module(self, fullname, path=None):
            return self.module

    def _find_module(fullname, oldtail, path):
        idx = oldtail.find('.')
        if idx > 0:
            name = oldtail[:idx]
            tail = oldtail[idx+1:]
            fmr = find_module(name, path)
            module = load_module(fullname[:-len(oldtail)] + name, *fmr)
            return _find_module(fullname, tail, module.__path__)
        else:
            fmr = find_module(fullname, path)
            return load_module(fullname, *fmr)

    # It uses vim module itself in place of VimPathFinder class: it does not 
    # matter for python which object has find_module function attached to as 
    # an attribute.
    class VimPathFinder(object):
        @classmethod
        def find_module(cls, fullname, path=None):
            try:
                return VimModuleLoader(_find_module(fullname, fullname, path or vim._get_paths()))
            except ImportError:
                return None

        @classmethod
        def load_module(cls, fullname, path=None):
            return _find_module(fullname, fullname, path or vim._get_paths())

    def hook(path):
        if path == vim.VIM_SPECIAL_PATH:
            return VimPathFinder
        else:
            raise ImportError

    sys.path_hooks.append(hook)

vim.VIM_SPECIAL_PATH					*python-VIM_SPECIAL_PATH*
	字符串常數，和 vim 路徑鉤聯合使用。如果 vim 安裝的路徑鉤被要求處理任何
	非 vim.VIM_SPECIAL_PATH 常數的路徑，拋出 ImportError。在唯一可能的另一
	種情況下，使用特殊載入程序。

	注意: 不能直接使用該常數的值，必須使用 vim.VIM_SPECIAL_PATH 對象。

vim.find_module(...)					*python-find_module*
vim.path_hook(path)					*python-path_hook*
	用於實現上述路徑載入的方法或對象。除非你想對 sys.meta_path 進行處理而
	可以看看 vim.path_hook，請不要直接使用它們。將來的 vim 版本不一定保證
	任何這裏描述的對象會繼續存在。

vim._get_paths						*python-_get_paths*
	用於產生給路徑鉤搜索的路徑列表的方法。可以用於調試，但不要假定將來的
	vim 版本中此方法會繼續存在。

	返回 'runtimepath' 中每個 {rtp} 對應的 {rtp}/python2 (或
	{rtp}/python3) 和 {rtp}/pythonx 的目錄列表。

==============================================================================
3. 緩衝區對象						*python-buffer*

緩衝區對象代表 vim 緩衝區。你可以用以下這幾種辦法來獲取緩衝區的列表:
	- 通過 vim.current.buffer (|python-current|)
	- 通過 vim.buffers 的索引訪問 (|python-buffers|)
	- 通過一個窗口的 "buffer" 屬性 (|python-window|)

緩衝區對象有兩個只讀屬性 - name - 緩衝區的文件全名，還有 number - 緩衝區號。
該對象還包括三個方法 (append，mark 及 range；見下)。

你也可以將緩衝區對象視爲序列對象。這樣的話，它們就可以被看作字符串的列表進行存
取 (它們是可變的)。每一個元素是緩衝區中的一行。所有通常的序列存取操作，包括索
引，索引賦值，切片 (slice) 及切片賦值，等等，都可以被使用。注意 索引 (切片) 操
作的結果是一個字符串 (字符串列表)。這產生了一個意想不到的結果 - b[:] 和 b 是不
同的。確切一些，"b[:] = None" 會清空整個緩衝區，而 "b = None" 僅僅更新變量 b
的值，完全不會影響到緩衝區。

緩衝區索引從 0 開始算起，這與通常的 Python 語法一致。但這和 Vim 的行號從 1 算
起有分歧。這一點在處理標記 (見下) 是要特別留意，因爲標記是以行號區分的。

緩衝區對象的屬性有:
	b.vars		類似字典的對象，可用於訪問 |buffer-variable|。
	b.options	映射對象 (支持子項目的讀寫和刪除)，用於訪問局部於緩衝
			區的選項和 |global-local| 選項的緩衝區局部值。如果選項
			局部於窗口，請使用 |python-window|.options，使用此對象
			會拋出 KeyError。如果選項是 |global-local| 而沒有局部
			的部分，返回 None。
	b.name		字符串，可讀寫。包含緩衝區名 (完整路徑)。
			備註: 給 b.name 賦值時激活 |BufFilePre| 和
			|BufFilePost| 自動事件。
	b.number	緩衝區編號。可用作 |python-buffers| 的鍵。只讀。
	b.valid		True 或 False。如果對應的緩衝區被刪除 (wipe)，緩衝區對
			象就成爲非法。

緩衝區對象的方法有:
	b.append(str)	對緩衝區附加一行
	b.append(str, nr)  同上，在第 "nr" 行之後
	b.append(list)	對緩衝區附加一系列行
			備註: append 方法可以帶一個字符串列表作爲參數，這和
			Python 中內建的列表對象的對應方法是不同的。
	b.append(list, nr)  同上，在第 "nr" 行之後
	b.mark(name)	返回一個 tuple (行，列) 用來代表該位置上的一個命名標記
			(也可以用於 []"<> 等標記)
	b.range(s,e)	返回一個範圍對象 (參見 |python-range|) 用來代表指定緩
			衝區中行 s 與 行 e (包含 s 和 e |inclusive|) 之間的部
		 	分。

注意: 當增加一行的時候，這一行裏一定不要含有換行符 '\n'。行尾的 '\n' 可以，
但會被忽略，所以下面的操作是可以的:
	:py b.append(f.readlines())

可通過 vim 模塊的 "Buffer" 屬性取得緩衝區對象的類型。

例如 (假定 b 是當前緩衝區) >
	:py print b.name		# 輸出緩衝區的名字
	:py b[0] = "hello!!!"		# 替換最頂上的一行
	:py b[:] = None			# 刪除整個緩衝區
	:py del b[:]			# 刪除整個緩衝區
	:py b[0:0] = [ "a line" ]	# 在第一行前添加一行
	:py del b[2]			# 刪除一行 (第三行)
	:py b.append("bottom")		# 在緩衝區結尾添加一行
	:py n = len(b)			# 總行數
	:py (row,col) = b.mark('a') 	# 命名標記
	:py r = b.range(1,5)		# 緩衝區內的一個範圍
	:py b.vars["foo"] = "bar"	# 給 b:foo 變量賦值
	:py b.options["ff"] = "dos"	# 設置 fileformat
	:py del b.options["ar"]		# 等同於 :set autoread<

==============================================================================
4. 範圍對象						*python-range*

範圍對象代表一個 vim 緩衝區內的一個部分。你可以用以下的方法之一來獲取一個緩衝
區對象:
	- 通過 vim.current.range (|python-current|)
	- 通過一個緩衝區的 range() 方法 (|python-buffer|)

一個範圍對象在操作上幾乎和一個緩衝區對象完全一樣。不過，其操作的目標僅顯於範圍
指定的行 (當然，這個行範圍會隨着切片賦值，行刪除，或者 range.append() 等等操作
而改變)。

範圍對象的屬性有:
	r.start		首行在緩衝區內的索引
	r.end		尾行在緩衝區內的索引

範圍對象的方法有:
	r.append(str)	給範圍附加一行
	r.append(str, nr)  同上，在第 "nr" 行之後
	r.append(list)	給範圍附加一系列行
			備註: append 方法可以帶一個字符串列表作爲參數，這和
			Python 中內建的列表對象的對應方法是不同的。
	r.append(list, nr)  同上，在第 "nr" 行之後

可通過 vim 模塊的 "Range" 屬性取得範圍對象的類型。

例如 (假設 r 是當前範圍):
	# 發送範圍內的所有行給缺省打印機
	vim.command("%d,%dhardcopy!" % (r.start+1,r.end+1))

==============================================================================
5. 窗口對象						*python-window*

窗口對象代表一個 vim 窗口。你可以用以下幾種方法來獲取一個窗口對象:
	- 通過 vim.current.window (|python-current|)
	- 通過對 vim.windows 的索引操作 (|python-windows|)
	- 通過對標籤頁的 "windows" 屬性的索引操作 (|python-tabpage|)
	- 通過標籤頁的 "window" 屬性 (|python-tabpage|)

你只能通過窗口對象的屬性來控制它。這些對象沒有方法，也沒有序列等其它接口。

窗口的屬性包括:
	buffer (只讀)		窗口中顯示的緩衝區
	cursor (讀寫)		窗口中的當前光標位置
				這是一個 tuple (行，列)。
	height (讀寫)		行數表示的窗口高度
	width (讀寫)		列數表示的窗口寬度
	vars (只讀)		窗口 |w:| 變量。不能給本屬性賦值，但可以用此屬
				性修改窗口變量
	options (只讀)		局部於窗口的選項。不能給本屬性賦值，但可以用此
				屬性修改窗口選項。只能用於訪問局部於窗口的選
				項，對局部於緩衝區的選項要用 |python-buffer|，
				對全局選項用 |python-options|。如果選項是
				|global-local| 的而沒有局部值，返回 None。
	number (只讀)		窗口編號。首個窗口的編號爲 1。如果不能決定才
				會返回 0 (例如當窗口對象屬於其他標籤頁時)。
	row、col (只讀)		窗口在屏幕上的位置，以顯示單元計。首個位置爲
				零。
	tabpage (只讀)		窗口的標籤頁。
	valid (讀寫)		True 或 False。當對應窗口關閉時窗口對象成爲非
				法。

height 屬性只有當屏幕被水平分割時纔可寫。
width  屬性只有當屏幕被垂直分割時纔可寫。

可通過 vim 模塊的 "Window" 屬性取得窗口對象的類型。

==============================================================================
6. 標籤頁對象						*python-tabpage*

標籤頁對象代表一個 vim 標籤頁。你可以用以下幾種方法來獲取之:
	- 通過 vim.current.tabpage (|python-current|)
	- 通過對 vim.tabpages 的索引操作 (|python-tabpages|)

你可以通過該對象來訪問標籤頁裏的窗口。這些對象沒有方法，也沒有序列等其它接口。

標籤頁的屬性包括:
	number		標籤頁編號，和 |tabpagenr()| 相同。
	windows		類似於 |python-windows|，但對應當前標籤頁
	vars		標籤頁 |t:| 變量。
	valid		True 或 False。當對應標籤頁關閉時標籤頁對象成爲非法。

可通過 vim 模塊的 "TabPage" 屬性取得標籤頁對象的類型。

==============================================================================
7. vim.bindeval 對象				*python-bindeval-objects*

vim.Dictionary 對象				*python-Dictionary*
    類字典對象，用於訪問 vim |Dictionary| 類型。
    屬性:
        屬性       描述 ~
        locked     以下值之一                   *python-.locked*
                    值              描述 ~
                    zero            變量沒有上鎖
                    vim.VAR_LOCKED  變量已上鎖，但可以解鎖
                    vim.VAR_FIXED   變量已上鎖，且不可以解鎖
                   讀寫。可以通過給本屬性賦值 `True` 或 `False` 來給變量解鎖。
                   不支持遞歸上鎖。
        scope      以下值之一
                    值                 描述 ~
                    zero               字典無作用域
                    vim.VAR_DEF_SCOPE  |g:| 或 |l:| 字典
                    vim.VAR_SCOPE      其他作用域的字典，
                                       見 |internal-variables|
    方法 (備註: 方法不支持關鍵字參數):
        方法        描述 ~
        keys()      返回字典所有鍵的列表。
        values()    返回字典所有值的列表。
        items()     返回字典所有內容的二元組的列表。
        update(iterable)、update(dictionary)、update(**kwargs)
                    把新的鍵值加入字典。
        get(key[, default=None])
                    從字典讀入 key 對應值，如果不存在返回 default。
        pop(key[, default])
                    從字典中刪除給定 key 並返回對應值。如果找不到 key 且給出
                    default 返回 default，不然拋出 KeyErrror。
        popitem()
                    從字典中刪除隨機鍵，並返回 (鍵, 值) 對。
        has_key(key)
                    檢查字典中是否包含給定的鍵 key，類似於 `key in dict`。

        __new__(), __new__(iterable), __new__(dictionary), __new__(update)
                    用 `vim.Dictionary()` 可以建立新的 vim 字典。
                    `d=vim.Dictionary(arg)` 等價於
                    `d=vim.bindeval('{}');d.update(arg)`。無參數的版本構建空
                    字典。

    示例: >
        d = vim.Dictionary(food="bar")		# 構造函數
        d['a'] = 'b'				# 子項目賦值
        print d['a']				# 讀取子項目
        d.update({'c': 'd'})			# .update(dictionary)
        d.update(e='f')				# .update(**kwargs)
        d.update((('g', 'h'), ('i', 'j')))	# .update(iterable)
        for key in d.keys():			# .keys()
        for val in d.values():			# .values()
        for key, val in d.items():		# .items()
        print isinstance(d, vim.Dictionary)	# True
        for key in d:				# 遍歷所有鍵
        class Dict(vim.Dictionary):		# 子類
<
    注意: 遍歷鍵時不應對字典進行修改。

vim.List 對象					*python-List*
    類序列對象，用於訪問 vim |List| 類型。
    支持 `.locked` 屬性，見 |python-.locked|。還支持以下方法:
        方法            描述 ~
        extend(item)    給列表加入項目 item。

        __new__(), __new__(iterable)
                        用 `vim.List()` 可以建立新的 vim 列表。
                        `l=vim.List(iterable)` 等價於
                        `l=vim.bindeval('[]');l.extend(iterable)`。無參數的版
                        本方法構建空列表。
    示例: >
        l = vim.List("abc")		# 構造函數，返回: ['a', 'b', 'c']
        l.extend(['abc', 'def'])	# .extend() 方法
        print l[1:]			# 分片 (slicing)
        l[:0] = ['ghi', 'jkl']		# 分片賦值
        print l[0]			# 讀取項目
        l[0] = 'mno'			# 賦值
        for i in l:			# 遍歷
        print isinstance(l, vim.List)	# True
        class List(vim.List):		# 子類

vim.Function 對象				*python-Function*
    類函數對象，相當於 vim |Funcref| 對象。支持 `.name`  屬性。可以進行調用。
    接受特殊的關鍵字參數 `self`，見 |Dictionary-function|。還可用
    `vim.Function(name)` 構造函數，等價於
    `vim.bindeval('function(%s)'%json.dumps(name))`。

    示例: >
        f = vim.Function('tr')			# 構造函數
        print f('abc', 'a', 'b')		# 調用 tr('abc', 'a', 'b')
        vim.command('''
            function DictFun() dict
                return self
            endfunction
        ''')
        f = vim.bindeval('function("DictFun")')
        print f(self={})			# 相當於 call('DictFun', [], {})
        print isinstance(f, vim.Function)	# True

==============================================================================
8. pyeval() 和 py3eval() Vim 函數			*python-pyeval*

爲了訪問雙向接口的方便，可用 |pyeval()| 和 |py3eval()| 函數來計算 Python 表達
式然後返回計算結果給 Vim。

==============================================================================
9. 動態調入						*python-dynamic*

MS-Windows 上，可以動態調入 Python 庫。|:version| 輸出這時應包括
|+python/dyn|。

這意味着 Vim 只有在必要時才尋找 Python DLL 文件。如果不使用 Python 接口，你就
不需要它。這樣，即使沒有該 DLL 文件，你也可使用 Vim。

要使用 Python 接口，Python DLL 必須在搜索路徑上。控制檯窗口裏輸入 "path" 可以
看到 (搜索路徑) 當前使用的目錄。

DLL 的名字必須匹配 Vim 編譯時所使用的 Python 版本。目前，該名字爲
"python24.dll"，也就是 Python 2.4。要確信這一點，編輯 "gvim.exe" 文件並查找
"python\d*.dll\c"。

==============================================================================
10. Python 3						*python3*

							*:py3* *:python3*
`:py3` 和 `:python3` 命令和 `:python` 類似。判斷 `:py3` 命令是否可用的一個簡單
檢查: >
	:py3 print("Hello")
<							*:py3file*
`:py3file` 命令和 `:pyfile` 類似。
							*:py3do* *E863*
`:py3do` 命令和 `:pydo` 類似。


Vim 可以用四種方式編譯 (:version 輸出結果):
1. 無 Python 支持	    (-python、-python3)
2. 只有 Python 2 支持       (+python 或 +python/dyn、-python3)
3. 只有 Python 3 支持       (-python、+python3 或 +python3/dyn)
4. Python 2 和 3 支持       (+python/dyn、+python3/dyn)

關於第四種特殊情況的更多細節:  *python-2-and-3*

要同時支持 Python 2 和 Python 3，兩者必須都是動態載入。

在 Linux/Unix 系統上用這種方式並導入全局符號的時候，使用第二個 Python 版本會導
致系統崩潰。所以，要麼載入全局符號但只激活一個 Python 版本，要麼考慮不載入全局
符號。後者使 Python 導入 ("import") 某些期待 Vim 提供某些符號的庫的時候會失
敗。
							*E836* *E837*
Vim 的配置腳本根據一個特定的 Python 標準庫 (termios) 對所有的庫進行猜測。如果
對兩個 Python 版本導入該庫均成功，那麼可以在 Vim 中同時使用兩者。否則在一個會
話中，只允許使用先用到的版本。使用第二個版本會得到 E836 或 E837 的錯誤信息。

這裏 Vim 的行爲取決於配置所在的系統。如果兩個 Python 版本都用了
--enable-shared 進行配置，兩者會同時激活。但沒有鏈接進 libPython 的第三方庫仍
然會有問題。

要迴避這些問題，有以下幾個方案:
1. 重新編譯有問題的庫，把它鏈接進相應的 libpython.so 裏。
2. 重新編譯 Vim，只用一個 Python 版本。
3. 配置完後，撤銷 auto/config.h 中 PY_NO_RTLD_GLOBAL 的定義。這可能會使 Vim 崩
   潰。

							*E880*
從 python 拋出 SystemExit 例外不是退出 vim 的好方法，要用: >
	:py vim.command("qall!")
<

							*has-python*
以下方法可用來測試哪個 Python 版本可用: >
	if has('python')
	  echo '有 Python 2.x'
  	elseif has('python3')
	  echo '有 Python 3.x'
	endif

注意 不過，當 Python 2 和 3 同時存在且都是動態載入，這些 has() 調用會試圖載入
它們。如果兩個版本不能同時載入，單單對 Python 2 或 3 是否可用的檢查就會導致另
一個版本不能調入。

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
