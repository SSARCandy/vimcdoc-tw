*repeat.txt*    For Vim version 7.4.  最近更新: 2013年8月


		  VIM 參考手冊    by Bram Moolenaar
				譯者: Willis
				http://vimcdoc.sf.net


重覆命令，Vim 指令碼和偵錯				*repeating*

使用者手冊第 26 章 |usr_26.txt| 介紹了重覆命令。

1. 單次重複		|single-repeat|
2. 多次重複		|multi-repeat|
3. 重複組合操作		|complex-repeat|
4. 使用 Vim 指令碼	|using-scripts|
5. 偵錯指令碼		|debug-scripts|
6. 刨視			|profiling|

==============================================================================
1. 單次重複						*single-repeat*

							*.*
.			重覆上次改變，有計數字首的重複 [count] 次。
			如果 'cpoptions' 包括 'y' 標誌， 也可以用來重複一個抽
			出 (yank) 操作。不能重覆命令列命令。

簡單的改變操作可以用 "." 重複。如果沒有數字字首，使用上次的改變的重複次數。如
果輸入一個重複次數，就用它取代上次的計數。如果上次改變的操作使用數字編號的寄存
器，則逐次遞增使用寄存器的序號。一個使用的示例可以參見 |redo-register|。注意，
如果重複的命令涉及可視的選擇區域，使用相同_大小_的區域。參見 |visual-repeat|。

							*@:*
@:			重覆上次命令列 [count] 次。
			{僅當編譯時加入 |+cmdline_hist| 特性纔可用}


==============================================================================
2. 多次重複					*multi-repeat*

						*:g* *:global* *E147* *E148*
:[range]g[lobal]/{pattern}/[cmd]
			在 [range] 界定的匹配模式 {pattern} 的文字行上執行
			Ex 命令 [cmd] (預設是 ":p")。

:[range]g[lobal]!/{pattern}/[cmd]
			在 [range] 界定的_不_匹配模式 {pattern} 的文字行上執
			行 Ex 命令 [cmd] (預設是 ":p")。

							*:v* *:vglobal*
:[range]v[global]/{pattern}/[cmd]
			等同於 :g!。

除了用 '/' 來包圍 {pattern} 以外，你可以用任何其它單位元組字元，但不包括字母、
'\'、'"' 或 '|'。這對你想在搜索模式或者替代字元串裡包含 '/' 很有用。

模式的定義見 |pattern|。

global 命令先掃描 [range] 界定的行，然後對每個匹配的行進行標記 (對於一個跨行的
匹配，則只針對開始的一行)。
第二次掃描對每個標記的行，並在其之前附加上行號，執行指定的 [cmd] 命令。 ":v"
和 ":g!" 命令針對未標記的行進行。如果一行被刪除，其標記也自動消失。
預設的 [range] 是整個緩衝區 (1,$)。用 "CTRL-C" 中斷該命令。如果某行的執行給
出錯誤，該行的執行被中斷，但 global 命令仍從下一個被標記或未被標記的行繼續。

要重複一個非 Ex 的命令， 你可以使用 ":normal" 命令:
	:g/pat/normal {commands}
要確保 {commands} 以完整的命令結束，不然 Vim 會等待你輸入該命令餘下的部分，對
每次匹配都將如此。由於螢幕此時還未更新，你恐怕會因此不知所措。參見 |:normal|。

撤銷/重做命令將會針對整個 global 命令。換而言之，前次上下文標記只有在命令開頭
會設一次 (用 "''" 可以回到 global 之前的游標位置)。

global 命令也設定最近使用的搜索模式和最近使用的替換模式 (後者是 vi 相容的)，以
便於全局替換一個字元串: >
	:g/pat/s//PAT/g
該命令替換所有的 "pat" 為 "PAT"。同樣的功能也可以用: >
	:%s/pat/PAT/g
實現。這樣省下了兩個字元！

Ex 模式下執行 "global" 時，使用 ":visual" 命令是特例。該命令移動到匹配行，進入
普通模式並在該模式下執行命令，直到你用 |Q| 回到 Ex 模式為止。對每個匹配行重複
此操作。此時不能再用 ":global"。要中止，按 CTRL-C 兩次。

==============================================================================
3. 重複組合操作					*complex-repeat*

							*q* *recording*
q{0-9a-zA-Z"}		在寄存器 {0-9a-zA-Z"} 裡記錄鍵入的字元 (大寫名字的寄存
			器表示附加鍵入的內容)。'q' 命令不能在執行寄存器時使
			用。同樣，在對映和 |:normal| 裡也不能。
			{Vi: 沒有記錄功能}

q			停止記錄。(注意 實現細節: 停止記錄的 'q' 不會被儲存在
			寄存器裡，除非它是對映的結果) {Vi: 沒有記錄功能}

							*@*
@{0-9a-z".=*+}		執行寄存器 {0-9a-z".=*+} 的內容 [count] 次。 注意 不能
			用寄存器 '%' (當前檔名) 和 '#' (輪換檔名)。
			寄存器的執行方式與對映類同，'wildchar' 和 'wildcharm'
			的差異適用此處。
			"@=" 則會提示你輸入一個表示式。這個表示式的結果會被執
			行。
			參見 |@:|。{Vi: 只有命名寄存器可用}

							*@@* *E748*
@@			執行上次執行的 @{0-9a-z":*} [count] 次。

:[addr]*{0-9a-z".=+}						*:@* *:star*
:[addr]@{0-9a-z".=*+}	把寄存器 {0-9a-z".=*+} 裡的內容看成一個 Ex 命令執行。
			首先，把游標放在 [addr] 行 (預設是當前行) 上。如果
			'cpoptions' 設定了 'e' 標誌位而寄存器的內容最後一行沒
			有 <CR>，會自動加上。
			注意 ":*" 命令只有在 'cpoptions' 設定 '*' 標誌位時纔會
			識別。如果用 'nocompatible'，這_並_非預設。
			":@=" 使用最近使用的表示式。表示式執行的結果被當作 Ex
			命令執行。
			這些命令裡，不識別對映。
			{Vi: 只有某些版本有此功能}
			將來: 會對地址範圍裡每一行執行寄存器的命令。

							*:@:*
:[addr]@:		先把游標放在 [addr] 行 (預設是當前行) 上，然後重覆上次
			的命令列。 {Vi 無此功能}

							*:@@*
:[addr]@@		先把游標放在 [addr] 行 (預設是當前行) 上，然後重覆上次
			的 :@{0-9a-z"}。 {Vi 只有某些版本有此功能}

==============================================================================
4. 使用 Vim 指令碼					*using-scripts*

參閱使用者手冊第 41 章 |usr_41.txt| 瞭解如何寫 Vim 指令碼。

					*:so* *:source* *load-vim-script*
:so[urce] {file}	從 {file} 裡讀取 Ex 命令，即 ":" 開頭的命令，並執行。
			啟用 |SourcePre| 自動命令。

:so[urce]! {file}	從 {file} 裡讀取 Vim 命令，就像你在普通模式下鍵入的命
			令一樣。
			如果要執行的命令在 |:global|、|:argdo|、|:windo| 或
			|:bufdo| 之後、在迴圈體內、或者有另外一個命令緊跟其
			後，那麼執行時不會更新螢幕顯示。
			{Vi 無此功能}

							*:ru* *:runtime*
:ru[ntime][!] {file} ..
			從 'runtimepath' 指定的目錄裡查找 {file}。從匹配的檔案
			裡讀取 Ex 命令。如果沒有匹配的檔案，不報錯。例如: >
				:runtime syntax/c.vim

<			可以指定多個以空格分隔的 {file} 參數。每個 {file} 都從
			'runtimepath' 指定的第一個目錄開始查找，然後是第二個、
			第三個，等等。{file} 裡可以通過加反斜槓來包含空格 (不
			過，為了避免麻煩，最好不要在檔名裡使用空格)。

			如果使用了 [!]，所有找到的檔案都被執行。否則，只執行第
			一個找到的檔案。

			如果 {file} 包含通配符，它被擴展為所有的匹配檔名。例
			如: >
				:runtime! plugin/*.vim
<			這是 Vim 啟動的時候啟動插件所使用的命令。類似的: >
				:runtime plugin/*.vim
<			只會執行其中的第一個檔案。

			當 'verbose' 至少為一時，如果沒有檔案找到，會顯示信
			息。
			當 'verbose' 至少為二時，對每個搜索到的檔案都會提示信
			息。
			{Vi 無此功能}

:scripte[ncoding] [encoding]		*:scripte* *:scriptencoding* *E167*
			指定指令碼使用的字元編碼。後續以 [encoding] 編碼的指令碼行
			會被轉換成 'encoding' 選項所指定的編碼，如果兩者不同的
			話。如: >
				scriptencoding iso-8859-5
				scriptencoding cp932
<
			如果 [encoding] 為空，則不作任何轉換。這可以用來避免對
			一些行進行轉換: >
				scriptencoding euc-jp
				... 被轉換的行 ...
				scriptencoding
				... 不被轉換的行 ...

<			如果系統不支援所需的轉換，不會有錯誤資訊，但轉換也不會
			發生。

			不要用 "ucs-2" 或者 "ucs-4"。Vim 不能用這些編碼的指令碼
			(因為其中會有 NUL 位元組)。如果一個待執行的指令碼以一個
			BOM (Byte Order Mark 位元組順序標記) 開頭，Vim 會識別其
			為 utf-8 編碼，從而無須指定 ":scriptencoding utf-8"。

			如果編譯時沒有指定 |+multi_byte| 特性，這個命令會被忽
			略。
			{Vi 無此命令}

						*:scrip* *:scriptnames*
:scrip[tnames]		列出所有執行過的指令碼名字，以它們初次執行之順序排列。排
			列的次序號碼被用作相應的指令碼 ID |<SID>|。
			{Vi 無此功能} {僅當編譯時加入 |+eval| 特性纔有功能}

						*:fini* *:finish* *E168*
:fini[sh]		停止執行指令碼。只能用在 Vim 指令碼中，來快速跳過指令碼的其
			餘內容。如果出現在 |:try| 之後但在相應的 |:finally|
			(如果存在的話) 之前，":finally" 到 |:endtry| 的內容還
			會執行。執行完所有巢狀的 ":try" 層的 ":finally" 程式碼
			後，最外層的 ":endtry" 纔會最終真正停止指令碼的執行。
			{Vi 無此功能}

所有的命令和命令序列可以通過把它們放在命名的寄存器裡執行來重複呼叫。有兩個方法
可以把命令放在寄存器裡:
- 用記錄命令 "q"。可以鍵入一串命令，在執行的同時它們被存入一個寄存器裡。這很簡
  明，因為你能看見你所做的事情。如果你敲錯了，用 "p" 把寄存器的內容 "放置" 在
  一個檔案裡，然後編輯這個命令序列，把它們再次放回到 (比如，用刪除命令) 寄存器
  裡。你也可以用大寫名字的寄存器名來附加命令，從而繼續上次的紀錄。
- 刪除 (delete) 或者抽出 (yank) 命令序列到寄存器。

常用的命令序列可以用 ":map" 命令對映到一個功能鍵上。

另外一個辦法則是把命令寫到一個檔案裡，用 ":source!" 命令執行之。這對很長的命令
序列有用。你甚至可以把它和 ':map' 命令混合使用，從而用一個功能鍵來儲存複雜的功
能。

':source' 命令從檔案裡逐行讀取 Ex 命令。如果其間需要鍵盤輸入，你需要自己鍵入。
'source!' 命令從指令碼里逐字讀取命令，就像你自己敲入每一個字元一樣。

示例: 如果你給出一個 ':!ls' 命令，你得到一個 |hit-enter| 提示。如果你用
':source' 執行包含 '!ls' 一行的檔案，你必須按一個回車。不過如果你用 ':source!'
來執行包含 ':!ls' 的檔案，其後的字元會依次讀入，直到遇到一個 <CR> 為止。你不需
要通過鍵盤鍵入這個 <CR>，除非 ":!ls" 是檔案的最後一行。

在指令碼里當然也可以有 ':source[!]' 命令，從而可以建立一個自頂而下的指令碼呼叫樹。
':source' 命令允許的巢狀深度由同時開啟的最大的檔案數目決定 (大概 15 個左右)，
':source!' 命令許可的巢狀深度則最多為 15 層。

在被執行的檔案裡，你可以在需要檔名的地方用 "<sfile>" 字元串 (直接的文字，不
是一個特殊的鍵)。它會被被執行的檔案的名字來代替。例如，如果你在 ".vimrc" 檔案
相同的目錄裡有一個 "other.vimrc" 檔案，你可以在 ".vimrc" 裡如此呼叫它: >
	:source <sfile>:h/other.vimrc

在指令碼檔案裡，依賴於終端的鍵碼由不依賴於終端的兩個字元碼代表。這樣，他們就能在
不同的終端裡代表相同的意義。這裡，第一個字元碼是 0x80 或者 128，螢幕上顯示
為 "~@"。第二個字元可以在 |key-notation| 列表裡找到。這些編碼也可以用 CTRL-V
加上一個三位數字的十進位制碼來鍵入。這個方法_不_適用於 <t_xx> termcap 程式碼，它們
只能用在對映裡。

							*:source_crnl* *W15*
MS-DOS、Win32 和 OS/2: 用 ":source" 執行的檔案通常每行以 <CR><NL> 結尾。這沒有
問題。在 'fileformats' 非空並且第一行不以 <CR> 結尾的時候，用 <NL> 的行結尾
(比如，Unix 編寫的檔案) 會被識別。不過，如果第一行裡有 ":map <F1> :help^M" 這
樣的內容 (其中 ^M 是一個 <CR>)，這個機制會失敗。如果第一行以
<CR> 結尾，但其後的行不是，那你會得到錯誤資訊，因為第一行裡的 <CR> 會丟失。

Mac Classic: 用 ":source" 執行的檔案通常每行以 <CR> 結尾。這沒有問題。在
'fileformats' 非空並且第一行不以 <CR> 結尾的時候，用 <NL> 的行結尾 (比如，Unix
編寫的檔案) 會被識別。如果用 <NL> 行結尾的時候，要小心第一行不要有 <CR>。

在別的系統上，Vim 期待 ":source" 執行的檔案以 <NL> 行結尾。這沒有問題。如果你
的檔案用 <CR><NL> 結束行 (比如，MS-DOS 編寫的檔案)，所有的行都會有一個附尾的
<CR>。有些命令 (比如對映命令) 會因此有問題。這裡不使用自動換行符識別機制，因為
第一行出現以 <CR> 結尾的對映命令很常見，自動機制這時容易出錯。

							*line-continuation*
":source" 執行的 Ex 命令指令碼里的長行可以用通過在下一行的開始插入續行符 "\" (反
斜槓) 來分開。反斜槓之前可以出現空格，它們將被忽略。

示例: 如下幾行 >
	:set comments=sr:/*,mb:*,el:*/,
		     \://,
		     \b:#,
		     \:%,
		     \n:>,
		     \fb:-
會被解讀為一行: >
	:set comments=sr:/*,mb:*,el:*/,://,b:#,:%,n:>,fb:-

每行反斜槓之前的所有引導空白字元會被忽略。注意: 在此之前的一行的行尾的空格可能
不能隨便添加；這由命令分開的位置決定，那裡也許可以也許不可以有額外的空格。

需要空格時最好放在反斜槓之後。行尾的空格很難注意到，很可能會被意外刪除掉。 >
	:syn match Comment
		\ "very long regexp"
		\ keepend

在用 ":append" 和 ":insert" 命令時，有一個問題: >
   :1append
   \asdf
   .
反斜槓被看作續行符，所以這等價於以下命令: >
   :1appendasdf
   .
要避免這一點，在 'cpoptions' 選項里加上 'C' 標誌位: >
   :set cpo+=C
   :1append
   \asdf
   .
   :set cpo-=C

要 注意 在函數裡的命令裡用到這些命令時，你需要在定義函數的時候加上 'C' 標誌
位，不是在執行函數的時候。 >
   :set cpo+=C
   :function Foo()
   :1append
   \asdf
   .
   :endfunction
   :set cpo-=C

原理:
	許多程式用行尾的反斜槓來指示行要繼續。如果這樣，Vim 會和 Vi 不相容。例
	如下面的 Vi 對映: >
		:map xx  asdf\
<	因此，只能用特殊形式的出現在行首的反斜槓。

==============================================================================
5. 偵錯指令碼						*debug-scripts*

除了在自己的指令碼里提示明顯的訊息，Vim 提供了偵錯模式來讓你瞭解自己的程式碼在做什
麼。你可以單步執行指令碼檔案和函數和設定斷點。

請 注意: 偵錯模式遠未完善。偵錯程式會對 Vim 的工作產生副作用。你不能用它偵錯一
切細節。例如，偵錯資訊會弄亂螢幕的顯示。
{Vi 沒有偵錯模式}

另外一個辦法是設定 'verbose' 選項。設定一個比較大的數字，你會得到 Vim 在做什麼
的更詳盡的資訊。


啟 動 調 試 模  式						*debug-mode*

以下方法可以進入偵錯模式:
1. 用 |-D| 參數啟動 Vim: >
	vim -D file.txt
<  偵錯會在執行第一個 vimrc 檔案的時候開始。這有助於瞭解 Vim 啟動的時候幹了些
   什麼。一個副作用是 Vim 會在初始化完成之前切換終端模式，這會有意想不到的後
   果。
   對只用 GUI 的版本 (Windows、Macintosh) 偵錯會在 GUI 視窗開啟的一刻開始。要
   提早進入偵錯，在 vimrc 檔案里加上 ":gui" 命令。
								*:debug*
2. 執行命令前加上 ":debug" 字首。這樣，偵錯只對這個命令進行。這對偵錯某一個特
   定的指令碼和使用者函數，或者 autocommands 用到的指令碼和函數有用。例如: >
	:debug edit test.txt.gz

3. 在一個執行的檔案和使用者函數裡設定斷點。你可以在命令列裡這麼做: >
	vim -c "breakadd file */explorer.vim" .
<  這會啟動 Vim 並在 "explorer.vim" 指令碼的第一行停下。進入偵錯模式後也可以設定
   斷點。

在偵錯模式裡，每個命令都會在執行前被顯示。註釋行、空行和其他不執行的行會被跳
過。如果一行裡有兩個 "|" 分隔的命令，它們被分別顯示。


調 試 模 式

進入偵錯模式以後，可以使用通常的 Ex 命令。比如，要檢查某變數的值: >
	echo idx
在一個使用者函數裡，這會顯示局域變數 "idx" 的值。在變數前加上 "g:" 可以得到全局
變數的值: >
	echo g:idx
所有的命令都在當前函數或指令碼的上下文下執行。你可以設定選項，比如設定或者重設
'verbose' 來顯示當前發生的事情，但是你需要在執行你感興趣的行之前設定它們: >
	:set verbose=20

要避免更新螢幕的命令，因為直到退出偵錯模式之前，無法看到它們的效果。例如，幫助
命令: >
	:help
不會很有幫助。

偵錯模式有自己的命令列歷史。

函數行的行號是相對於函數開始的地方的。如果你要知道你在哪裡，在另外一個 Vim 裡
編輯包含這個函數的檔案，先找到函數的開始處，然後用 "99j"，其中的 "99" 用實際的
行號代替。

另外，可以使用如下的命令:
							*>cont*
	cont		繼續執行到下一個斷點。
							*>quit*
	quit		終止執行。這和 CTRL-C 類似，但是還是有要執行的東西，並
			不是所有的都中止。在遇到斷點時還是會停下來。
							*>next*
	next		執行一個命令，並在它結束時返回偵錯模式。步過使用者函數
			呼叫和被執行的指令碼。
							*>step*
	step		執行一個命令，並在它結束時返回偵錯模式。步入使用者函數
			呼叫和被執行的指令碼。
							*>interrupt*
	interrupt	類似於 CTRL-C，但不同於 ">quit"，這會在執行下個命令前
			返回到偵錯模式。它有助於測試 |:finally| 和 |:catch|
			對中斷例外的處理。
							*>finish*
	finish		結束當前的指令碼或者使用者函數，並在呼叫該指令碼或函數的行的
			下一行之前返回到偵錯模式。

關於偵錯模式下的附加命令:
- 沒有它們的命令列自動補全。補全只對一般的 Ex 命令有效。
- 可以用一個字元來簡寫，即: "c"、"n"、"s" 和 "f"。
- 按 <CR> 會重複上一個偵錯命令。在執行另一個命令之後，這個功能會被關掉 (因為不
  知道你要重複什麼)。
- 如果你想呼叫相同的名字的 Ex 命令，在前面附加一個冒號: ":cont"、":next"、
  ":finish" (或者它們的縮寫)。


定 義 斷 點
							*:breaka* *:breakadd*
:breaka[dd] func [lnum] {name}
		在函數上設定斷點。例如: >
			:breakadd func Explore
<		它不會檢查函數名的合法性。這樣，斷點可以在函數定義之前設定。

:breaka[dd] file [lnum] {name}
		在一個指令碼檔案上設定斷點。例如: >
			:breakadd file 43 .vimrc

:breaka[dd] here
		在當前檔案的當前行上設定斷點。類似於: >
			:breakadd file <cursor-line> <current-file>
<		注意 只能用於執行此檔案時會執行的命令，不適用於該檔案此處定義
		的函數。

其中 [lnum] 是斷點所在的行號。Vim 會在它或它之後的行上停止。如果省略，就用行號
1。

							*:debug-name*
{name} 是用來匹配檔名或者函數名的模式。這和 autocommands 所有的模式類似。它
必須是一個完整匹配 (如同它以 "^" 開頭和 "$" 結尾一樣)。"*" 匹配任何字元序列。
它不用 'ignorecase' 選項，但是模式裡可以用 "\c" 來忽略大小寫 |/\c|。不要給函數
名加上 ()！

對指令碼檔案的匹配給予它的完整檔名。例如: >
	breakadd file explorer
不會匹配。因為沒有給出路徑。  >
	breakadd file *explorer.vim
匹配 ".../plugin/explorer.vim" 和 ".../plugin/iexplorer.vim"。 >
	breakadd file */explorer.vim
只匹配 ".../plugin/explorer.vim"。

對函數名的匹配基於 ":function" 輸出結果裡它的顯示方式。對於局部函數，這意味著
函數名前會附加上類似 "<SNR>99_" 的字元串。

注意函數先被載入然後再執行。載入時，檢查 "file" 斷點，而執行時檢查 "func" 斷
點。


刪 除 斷 點
						*:breakd* *:breakdel* *E161*
:breakd[el] {nr}
		刪除斷點 {nr}。用 |:breaklist| 可以看到每個斷點的編號 {nr}。

:breakd[el] *
		刪除所有斷點。

:breakd[el] func [lnum] {name}
		刪除函數斷點。

:breakd[el] file [lnum] {name}
		刪除指令碼斷點。

:breakd[el] here
		刪除當前檔案的當前行上的斷點。

如果 [lnum] 省略，刪除該函數或者檔案的第一個斷點。
{name} 必須和 ":breakadd" 所匹配的名字完全相同。"explorer"、"*explorer.vim" 和
"*explorer*" 是不一樣的。


列 出 斷 點
							*:breakl* *:breaklist*
:breakl[ist]
		列出所有的斷點。


不 常 用 的

						*:debugg* *:debuggreedy*
:debugg[reedy]
		從正常的輸入流而不是直接從使用者輸入裡讀取偵錯模式命令。這只對測
		試指令碼有用。例如: >
		  echo 'q^Mq' | vim -e -s -c debuggreedy -c 'breakadd file script.vim' -S script.vim

:0debugg[reedy]
		撤銷 ":debuggreedy": 從使用者那裡直接讀取偵錯模式命令，而不為調
		試命令預讀取。

==============================================================================
6. 刨視							*profile* *profiling*

進行刨視意味著 Vim 測量執行函數和/或指令碼時使用的時間。為此，需要 |+profile| 特
性。只有 Vim 編譯時使用了 "huge" (巨大) 特性包纔會包含此特性。
{Vi 沒有刨視功能}

你也可以用 |reltime()| 函數來測量時間。這只需要 |+reltime| 特性，它更常出現。

關於語法高亮的刨視可見 |:syntime|。

:prof[ile] start {fname}			*:prof* *:profile* *E750*
		啟動刨視，退出時把結果寫到 {fname} 檔案。如果 {fname} 已存在，
		安靜地覆蓋它。變數 |v:profiling| 設為一。

:prof[ile] pause
		直到下個 ":profile continue" 為止，停止刨視。可用來執行一些不
		需計算的操作 (例如，執行外部命令)。不能巢狀。

:prof[ile] continue
		在 ":profile pause" 之後出現，恢復刨視。

:prof[ile] func {pattern}
		刨視匹配模式 {pattern} 的函數。
		|:debug-name| 說明如何使用 {pattern}。

:prof[ile][!] file {pattern}
		刨視匹配模式 {pattern} 的指令碼。
		|:debug-name| 說明如何使用 {pattern}。
		只刨視指令碼自身，不包括其中定義的函數。
		如果加入 [!]，同時刨視指令碼里定義的所有函數。但只有在此命令後載
		入指令碼纔會有效。


:profd[el] ...						*:profd* *:profdel*
		停止對指定參數的刨視，|:breakdel| 說明其中的參數。


刨視總是用 ":profile start fname" 開始。Vim 退出時寫入結果檔案。這裡是輸出的示
例，加上行號是為了方便解釋:

  1 FUNCTION  Test2() ~
  2 Called 1 time ~
  3 Total time:   0.155251 ~
  4  Self time:   0.002006 ~
  5  ~
  6 count  total (s)   self (s) ~
  7	9	       0.000096   for i in range(8) ~
  8	8   0.153655   0.000410     call Test3() ~
  9	8	       0.000070   endfor ~
 10				  " Ask a question ~
 11	1	       0.001341   echo input("give me an answer: ") ~

頭部 (行號 1-4) 給出整個函數的時間。"Total" 時間是函數執行時使用的時間。
"Self" 時間是 "Total" 時間減去用於下面事項的時間:
- 其它使用者定義的函數
- 執行指令碼
- 執行自動命令
- 外部 (外殼) 命令

行號 7-11 顯示每個執行行花費的時間。不計算不執行的行。所以註釋行從不參與計算。

Count 列顯示每行執行的次數。注意 到第 7 行的 "for" 命令執行次數比後面的行要多
一。這是因為該行也被用來檢測迴圈結束。

Vim 花費在等待使用者輸入的時間完全不參與計算。所以 input() 提示後你的響應時間不
相關。

刨視給出關於時間花費在哪裡的很好的指示，但要記住很多因素會影響輸出結果:

- 測量時間的準確度取決於 gettimeofday() 系統函數。精確度可能是 1/100 秒，但顯
  示的時間仍以微秒計。

- 測量的是實際流逝的時間。如果其它程序繁忙，可能造成的延遲無法預測。你可能需要
  多次運行刨視，並使用時間最少的結果。

- 如果一行內執行多個命令，你只會得到一個時間。要看到個別命令的時間，把行分開。

- 各行時間的加總幾乎總會比整個函數的時間要少。中間有少許開銷。

- Vim 退出前刪除的函數不會產生刨視資訊。如果需要，你可以檢查 |v:profiling| 變
  量: >
	:if !v:profiling
	:   delfunc MyFunc
	:endif
<
- 在多處理器系統中，因為睡眠模式或者為省電而減低處理器頻率等因素影響，刨視結果
  可能不正常。

- "self" 時間對遞迴呼叫的函數是不正確的。


 vim:tw=78:ts=8:ft=help:norl:
